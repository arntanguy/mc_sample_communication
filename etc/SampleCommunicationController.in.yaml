---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_INSTALL_PREFIX@"
- "@MC_STATES_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_INSTALL_PREFIX@/data"
- "@MC_STATES_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false
# Additional robots to load
robots:
  ground:
    module: env/ground
# General constraints, always on
constraints:
- type: contact
- type: dynamics
  damper: [0.1, 0.01, 0.5]
- type: compoundJoint
# Collision constraint
collisions:
- type: collision
  useMinimal: true
# Initial set of contacts
contacts:
- r1: hrp5_p 
  r2: ground
  r1Surface: LeftFoot
  r2Surface: AllGround
- r1: hrp5_p
  r2: ground
  r1Surface: RightFoot
  r2Surface: AllGround

# Implement some additional text states
states:
  StabilizedPostureInput:
    base: Parallel
    states: [Stabilizer::Standing, ROSPostureState]
  ## If you wish to change the topic name, you can uncomment the configuration below
  # configs:
  #   ROSPostureState:
  #     topic: "/your_custom_topic_name"

# Transitions map
transitions:
- [StabilizedPostureInput, OK, StabilizedPostureInput, Strict]
# Initial state
init: StabilizedPostureInput

##
# Setup state observation of the real robot state:
# - Joint state is obtained from encoder sensors
# - Floating base state (used to compute com position and velocity) is obtained by a simple kinematic inertial observer
#   exploiting IMU orientation and a control anchor point (roughly equivalent to Mehdi's TiltEstimator)
##
ObserverPipelines:
- name: "MainPipeline"
  observers:
  - type: Encoder
  - type: KinematicInertial
